{"ast":null,"code":"import { Directive, ElementRef, HostListener, Input, Component, ViewChild, ViewChildren, NgModule } from '@angular/core';\nimport * as Hammer from 'hammerjs';\nimport { FormsModule } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\nimport * as ɵngcc2 from '@angular/material/progress-spinner';\n\nconst _c0 = function (a0) {\n  return {\n    \"active\": a0\n  };\n};\n\nfunction DICOMViewerComponent_div_1_a_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r10 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"a\", 32);\n    ɵngcc0.ɵɵlistener(\"click\", function DICOMViewerComponent_div_1_a_2_Template_a_click_0_listener() {\n      const restoredCtx = ɵngcc0.ɵɵrestoreView(_r10);\n      const i_r8 = restoredCtx.index;\n      const ctx_r9 = ɵngcc0.ɵɵnextContext(2);\n      return ctx_r9.showSeries(i_r8);\n    });\n    ɵngcc0.ɵɵelement(1, \"div\", 33);\n    ɵngcc0.ɵɵelementStart(2, \"div\", 34);\n    ɵngcc0.ɵɵtext(3);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementStart(4, \"div\", 22);\n    ɵngcc0.ɵɵelementStart(5, \"div\", 35);\n    ɵngcc0.ɵɵtext(6);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const series_r7 = ctx.$implicit;\n    const i_r8 = ctx.index;\n    const ctx_r6 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵproperty(\"ngClass\", ɵngcc0.ɵɵpureFunction1(4, _c0, ctx_r6.currentSeriesIndex === i_r8));\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"imageData\", series_r7.imageList[0]);\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵtextInterpolate(series_r7.seriesDescription);\n    ɵngcc0.ɵɵadvance(3);\n    ɵngcc0.ɵɵtextInterpolate(series_r7.imageCount);\n  }\n}\n\nfunction DICOMViewerComponent_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 27);\n    ɵngcc0.ɵɵelementStart(1, \"div\", 28);\n    ɵngcc0.ɵɵtemplate(2, DICOMViewerComponent_div_1_a_2_Template, 7, 6, \"a\", 29);\n    ɵngcc0.ɵɵelementStart(3, \"div\", 30);\n    ɵngcc0.ɵɵelementStart(4, \"h6\", 31);\n    ɵngcc0.ɵɵelementStart(5, \"small\");\n    ɵngcc0.ɵɵtext(6, \"1.20.12.17\");\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵproperty(\"ngForOf\", ctx_r0.seriesList);\n  }\n}\n\nfunction DICOMViewerComponent_div_5_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r12 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"div\", 3);\n    ɵngcc0.ɵɵelementStart(1, \"button\", 36);\n    ɵngcc0.ɵɵlistener(\"click\", function DICOMViewerComponent_div_5_Template_button_click_1_listener() {\n      ɵngcc0.ɵɵrestoreView(_r12);\n      const ctx_r11 = ɵngcc0.ɵɵnextContext();\n      return ctx_r11.enableWindowing();\n    });\n    ɵngcc0.ɵɵelement(2, \"span\", 37);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementStart(3, \"button\", 38);\n    ɵngcc0.ɵɵlistener(\"click\", function DICOMViewerComponent_div_5_Template_button_click_3_listener() {\n      ɵngcc0.ɵɵrestoreView(_r12);\n      const ctx_r13 = ɵngcc0.ɵɵnextContext();\n      return ctx_r13.invertImage();\n    });\n    ɵngcc0.ɵɵelement(4, \"span\", 39);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementStart(5, \"button\", 40);\n    ɵngcc0.ɵɵlistener(\"click\", function DICOMViewerComponent_div_5_Template_button_click_5_listener() {\n      ɵngcc0.ɵɵrestoreView(_r12);\n      const ctx_r14 = ɵngcc0.ɵɵnextContext();\n      return ctx_r14.enableScroll();\n    });\n    ɵngcc0.ɵɵelement(6, \"span\", 41);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementStart(7, \"button\", 42);\n    ɵngcc0.ɵɵlistener(\"click\", function DICOMViewerComponent_div_5_Template_button_click_7_listener() {\n      ɵngcc0.ɵɵrestoreView(_r12);\n      const ctx_r15 = ɵngcc0.ɵɵnextContext();\n      return ctx_r15.enableLength();\n    });\n    ɵngcc0.ɵɵelement(8, \"span\", 43);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementStart(9, \"button\", 44);\n    ɵngcc0.ɵɵlistener(\"click\", function DICOMViewerComponent_div_5_Template_button_click_9_listener() {\n      ɵngcc0.ɵɵrestoreView(_r12);\n      const ctx_r16 = ɵngcc0.ɵɵnextContext();\n      return ctx_r16.enableAngle();\n    });\n    ɵngcc0.ɵɵelement(10, \"span\", 45);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementStart(11, \"button\", 46);\n    ɵngcc0.ɵɵlistener(\"click\", function DICOMViewerComponent_div_5_Template_button_click_11_listener() {\n      ɵngcc0.ɵɵrestoreView(_r12);\n      const ctx_r17 = ɵngcc0.ɵɵnextContext();\n      return ctx_r17.enableProbe();\n    });\n    ɵngcc0.ɵɵelement(12, \"span\", 47);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementStart(13, \"button\", 48);\n    ɵngcc0.ɵɵlistener(\"click\", function DICOMViewerComponent_div_5_Template_button_click_13_listener() {\n      ɵngcc0.ɵɵrestoreView(_r12);\n      const ctx_r18 = ɵngcc0.ɵɵnextContext();\n      return ctx_r18.enableElliptical();\n    });\n    ɵngcc0.ɵɵelement(14, \"span\", 49);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementStart(15, \"button\", 50);\n    ɵngcc0.ɵɵlistener(\"click\", function DICOMViewerComponent_div_5_Template_button_click_15_listener() {\n      ɵngcc0.ɵɵrestoreView(_r12);\n      const ctx_r19 = ɵngcc0.ɵɵnextContext();\n      return ctx_r19.enableRectangle();\n    });\n    ɵngcc0.ɵɵelement(16, \"span\", 51);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementStart(17, \"button\", 52);\n    ɵngcc0.ɵɵlistener(\"click\", function DICOMViewerComponent_div_5_Template_button_click_17_listener() {\n      ɵngcc0.ɵɵrestoreView(_r12);\n      const ctx_r20 = ɵngcc0.ɵɵnextContext();\n      return ctx_r20.resetImage();\n    });\n    ɵngcc0.ɵɵelement(18, \"span\", 53);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n  }\n}\n\nfunction DICOMViewerComponent_button_11_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r22 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"button\", 54);\n    ɵngcc0.ɵɵlistener(\"click\", function DICOMViewerComponent_button_11_Template_button_click_0_listener() {\n      ɵngcc0.ɵɵrestoreView(_r22);\n      const ctx_r21 = ɵngcc0.ɵɵnextContext();\n      return ctx_r21.playClip();\n    });\n    ɵngcc0.ɵɵelement(1, \"span\", 55);\n    ɵngcc0.ɵɵelementEnd();\n  }\n}\n\nfunction DICOMViewerComponent_button_12_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r24 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"button\", 56);\n    ɵngcc0.ɵɵlistener(\"click\", function DICOMViewerComponent_button_12_Template_button_click_0_listener() {\n      ɵngcc0.ɵɵrestoreView(_r24);\n      const ctx_r23 = ɵngcc0.ɵɵnextContext();\n      return ctx_r23.stopClip();\n    });\n    ɵngcc0.ɵɵelement(1, \"span\", 57);\n    ɵngcc0.ɵɵelementEnd();\n  }\n}\n\nfunction DICOMViewerComponent_a_13_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"a\", 58);\n    ɵngcc0.ɵɵelement(1, \"span\", 59);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r4 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"href\", ctx_r4.downloadImagesURL, ɵngcc0.ɵɵsanitizeUrl);\n  }\n}\n\nfunction DICOMViewerComponent_a_18_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r26 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"a\", 60);\n    ɵngcc0.ɵɵlistener(\"click\", function DICOMViewerComponent_a_18_Template_a_click_0_listener() {\n      ɵngcc0.ɵɵrestoreView(_r26);\n      const ctx_r25 = ɵngcc0.ɵɵnextContext();\n      return ctx_r25.loadMoreImages();\n    });\n    ɵngcc0.ɵɵelement(1, \"i\", 61);\n    ɵngcc0.ɵɵtext(2);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r5 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵtextInterpolate1(\" clique aqui para trazer as pr\\u00F3ximas \", ctx_r5.moreImagestoLoad, \" imagens \");\n  }\n}\n\nlet CornerstoneDirective = /*#__PURE__*/(() => {\n  class CornerstoneDirective {\n    constructor(elementRef) {\n      this.elementRef = elementRef;\n      this.imageList = [];\n      this.imageIdList = [];\n      this.currentIndex = 0;\n      this.patientName = ''; // current image Patient name, do display on the overlay\n\n      this.hospital = ''; // current image Institution name, to display on the overlay\n\n      this.instanceNumber = ''; // current image Instance #, to display on the overlay\n      // cornersTone Tools we use\n\n      this.WwwcTool = cornerstoneTools.WwwcTool;\n      this.PanTool = cornerstoneTools.PanTool;\n      this.ZoomTool = cornerstoneTools.ZoomTool;\n      this.ProbeTool = cornerstoneTools.ProbeTool;\n      this.LengthTool = cornerstoneTools.LengthTool;\n      this.AngleTool = cornerstoneTools.AngleTool;\n      this.EllipticalRoiTool = cornerstoneTools.EllipticalRoiTool;\n      this.RectangleRoiTool = cornerstoneTools.RectangleRoiTool;\n      this.DragProbeTool = cornerstoneTools.DragProbeTool;\n      this.ZoomTouchPinchTool = cornerstoneTools.ZoomTouchPinchTool;\n      this.PanMultiTouchTool = cornerstoneTools.PanMultiTouchTool;\n      this.StackScrollTool = cornerstoneTools.StackScrollTool;\n      this.StackScrollMouseWheelTool = cornerstoneTools.StackScrollMouseWheelTool;\n      this.isCornerstoneEnabled = false;\n    }\n\n    get windowingValue() {\n      if (this.isCornerstoneEnabled) {\n        let viewport = cornerstone.getViewport(this.element);\n\n        if (this.currentImage && viewport) {\n          return Math.round(viewport.voi.windowWidth) + \"/\" + Math.round(viewport.voi.windowCenter);\n        }\n      }\n\n      return '';\n    }\n\n    get zoomValue() {\n      if (this.isCornerstoneEnabled) {\n        let viewport = cornerstone.getViewport(this.element);\n\n        if (this.currentImage && viewport) {\n          return viewport.scale.toFixed(2);\n        }\n      }\n\n      return '';\n    }\n\n    onResize(event) {\n      if (this.isCornerstoneEnabled) {\n        cornerstone.resize(this.element, true);\n      }\n    }\n\n    onMouseWheel(event) {\n      event.preventDefault();\n\n      if (this.imageList.length > 0) {\n        const delta = Math.max(-1, Math.min(1, event.wheelDelta || -event.detail)); // console.log(event);\n\n        if (delta > 0) {\n          this.currentIndex++;\n\n          if (this.currentIndex >= this.imageList.length) {\n            this.currentIndex = this.imageList.length - 1;\n          }\n        } else {\n          this.currentIndex--;\n\n          if (this.currentIndex < 0) {\n            this.currentIndex = 0;\n          }\n        }\n\n        this.displayImage(this.imageList[this.currentIndex]);\n      }\n    }\n\n    ngOnInit() {\n      // Retrieve the DOM element itself\n      this.element = this.elementRef.nativeElement; // now add the Tools we use\n\n      cornerstoneTools.external.cornerstone = cornerstone;\n      cornerstoneTools.external.Hammer = Hammer;\n      cornerstoneTools.external.cornerstoneMath = cornerstoneMath;\n      cornerstoneTools.init({\n        globalToolSyncEnabled: true\n      });\n      cornerstoneTools.addTool(this.WwwcTool);\n      cornerstoneTools.addTool(this.PanTool);\n      cornerstoneTools.addTool(this.ZoomTool);\n      cornerstoneTools.addTool(this.ProbeTool);\n      cornerstoneTools.addTool(this.LengthTool);\n      cornerstoneTools.addTool(this.AngleTool);\n      cornerstoneTools.addTool(this.EllipticalRoiTool);\n      cornerstoneTools.addTool(this.RectangleRoiTool);\n      cornerstoneTools.addTool(this.DragProbeTool);\n      cornerstoneTools.addTool(this.ZoomTouchPinchTool);\n      cornerstoneTools.addTool(this.PanMultiTouchTool);\n      cornerstoneTools.addTool(this.StackScrollTool);\n      cornerstoneTools.addTool(this.StackScrollMouseWheelTool); // Enable the element with Cornerstone\n\n      this.resetViewer();\n    }\n\n    ngAfterViewChecked() {//  if (this.currentImage) cornerstone.resize(this.element, true);\n    } //\n    // reset the viewer, so only this current element is enabled\n    //\n\n\n    resetViewer() {\n      this.disableViewer();\n      cornerstone.enable(this.element);\n      this.isCornerstoneEnabled = true;\n    }\n\n    disableViewer() {\n      this.element = this.elementRef.nativeElement;\n\n      try {\n        cornerstone.disable(this.element);\n      } finally {}\n\n      this.isCornerstoneEnabled = false;\n    }\n\n    resetImageCache() {\n      this.imageList = [];\n      this.imageIdList = [];\n      this.currentImage = null;\n      this.currentIndex = 0;\n      this.patientName = '';\n      this.hospital = '';\n      this.instanceNumber = '';\n    }\n\n    previousImage() {\n      if (this.imageList.length > 0) {\n        this.currentIndex--;\n\n        if (this.currentIndex < 0) {\n          this.currentIndex = 0;\n        }\n\n        this.displayImage(this.imageList[this.currentIndex]);\n      }\n    }\n\n    nextImage() {\n      if (this.imageList.length > 0) {\n        this.currentIndex++;\n\n        if (this.currentIndex >= this.imageList.length) {\n          this.currentIndex = this.imageList.length - 1;\n        }\n\n        this.displayImage(this.imageList[this.currentIndex]);\n      }\n    }\n\n    addImageData(imageData) {\n      this.element = this.elementRef.nativeElement; //if (!this.imageList.filter(img => img.imageId === imageData.imageId).length) {\n\n      this.imageList.push(imageData);\n      this.imageIdList.push(imageData.imageId);\n\n      if (this.imageList.length === 1) {\n        this.currentIndex = 0;\n        this.displayImage(imageData);\n      } //}\n\n\n      cornerstone.resize(this.element, true);\n    }\n\n    displayImage(image) {\n      this.element = this.elementRef.nativeElement;\n      const viewport = cornerstone.getDefaultViewportForImage(this.element, image);\n      cornerstone.displayImage(this.element, image, viewport);\n      this.currentImage = image; // Fit the image to the viewport window\n\n      cornerstone.fitToWindow(this.element);\n      cornerstone.resize(this.element, true); // get image info to display in overlays\n\n      if (image.data.string('x00100010')) this.patientName = image.data.string('x00100010').replace(/\\^/g, '');\n      this.hospital = image.data.string('x00080080');\n      this.instanceNumber = image.data.intString('x00200011') + '/' + image.data.intString('x00200013'); // Activate mouse clicks, mouse wheel and touch\n      // cornerstoneTools.mouseInput.enable(this.element);\n      // cornerstoneTools.mouseWheelInput.enable(this.element);\n      // //cornerstoneTools.touchInput.enable(this.element);\n      // cornerstoneTools.keyboardInput.enable(this.element);\n      // Enable all tools we want to use with this element\n\n      cornerstoneTools.setToolActiveForElement(this.element, 'Wwwc', {\n        mouseButtonMask: 1\n      }, ['Mouse']); // ww/wc is the default tool for left mouse button\n\n      cornerstoneTools.setToolActiveForElement(this.element, 'Pan', {\n        mouseButtonMask: 4\n      }, ['Mouse']); // pan is the default tool for middle mouse button\n\n      cornerstoneTools.setToolActiveForElement(this.element, 'Zoom', {\n        mouseButtonMask: 2\n      }, ['Mouse']); // zoom is the default tool for right mouse button\n\n      /*     cornerstoneTools.wwwc.activate(this.element, 1); // ww/wc is the default tool for left mouse button\n          cornerstoneTools.pan.activate(this.element, 2); // pan is the default tool for middle mouse button\n          cornerstoneTools.zoom.activate(this.element, 4); // zoom is the default tool for right mouse button\n          cornerstoneTools.probe.enable(this.element);\n          cornerstoneTools.length.enable(this.element);\n          cornerstoneTools.angle.enable(this.element);\n          cornerstoneTools.simpleAngle.enable(this.element);\n          cornerstoneTools.ellipticalRoi.enable(this.element);\n          cornerstoneTools.rectangleRoi.enable(this.element);\n          cornerstoneTools.wwwcTouchDrag.activate(this.element) // - Drag\n          cornerstoneTools.zoomTouchPinch.activate(this.element) // - Pinch\n          cornerstoneTools.panMultiTouch.activate(this.element) // - Multi (x2) */\n      // Stack tools\n      // Define the Stack object\n\n      const stack = {\n        currentImageIdIndex: this.currentIndex,\n        imageIds: this.imageIdList\n      };\n      cornerstoneTools.addStackStateManager(this.element, ['playClip']); // Add the stack tool state to the enabled element\n\n      cornerstoneTools.addStackStateManager(this.element, ['stack']);\n      cornerstoneTools.addToolState(this.element, 'stack', stack); // cornerstoneTools.stackScrollWheel.activate(this.element);\n      // Enable all tools we want to use with this element\n\n      cornerstoneTools.setToolActiveForElement(this.element, 'StackScroll', {}); //cornerstoneTools.stackPrefetch.enable(this.element);\n    } // cornerstone.displayImage(this.element, image);\n    // deactivate all tools\n\n\n    resetAllTools() {\n      cornerstoneTools.setToolDisabledForElement(this.element, 'Wwwc');\n      cornerstoneTools.setToolDisabledForElement(this.element, 'Pan');\n      cornerstoneTools.setToolDisabledForElement(this.element, 'Zoom');\n      cornerstoneTools.setToolDisabledForElement(this.element, 'Probe');\n      cornerstoneTools.setToolDisabledForElement(this.element, 'Length');\n      cornerstoneTools.setToolDisabledForElement(this.element, 'Angle');\n      cornerstoneTools.setToolDisabledForElement(this.element, 'EllipticalRoi');\n      cornerstoneTools.setToolDisabledForElement(this.element, 'RectangleRoi');\n      cornerstoneTools.setToolDisabledForElement(this.element, 'DragProbe');\n      cornerstoneTools.setToolDisabledForElement(this.element, 'ZoomTouchPinch');\n      cornerstoneTools.setToolDisabledForElement(this.element, 'PanMultiTouch');\n      cornerstoneTools.setToolDisabledForElement(this.element, 'StackScroll');\n      cornerstoneTools.setToolDisabledForElement(this.element, 'StackScrollMouseWheel');\n    }\n\n  }\n\n  CornerstoneDirective.ɵfac = function CornerstoneDirective_Factory(t) {\n    return new (t || CornerstoneDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n  };\n\n  CornerstoneDirective.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: CornerstoneDirective,\n    selectors: [[\"\", \"cornerstone\", \"\"]],\n    hostBindings: function CornerstoneDirective_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"resize\", function CornerstoneDirective_resize_HostBindingHandler($event) {\n          return ctx.onResize($event);\n        }, false, ɵngcc0.ɵɵresolveWindow)(\"wheel\", function CornerstoneDirective_wheel_HostBindingHandler($event) {\n          return ctx.onMouseWheel($event);\n        });\n      }\n    }\n  });\n  return CornerstoneDirective;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet ThumbnailDirective = /*#__PURE__*/(() => {\n  class ThumbnailDirective {\n    constructor(elementRef) {\n      this.elementRef = elementRef;\n    }\n\n    ngOnInit() {\n      // Retrieve the DOM element itself\n      this.element = this.elementRef.nativeElement; // Enable the element with Cornerstone\n\n      cornerstone.enable(this.element);\n      this.setImageData(this.imageData);\n    }\n\n    ngAfterViewChecked() {\n      this.refresh();\n    }\n\n    refresh() {\n      this.setImageData(this.imageData);\n    }\n\n    setImageData(image) {\n      this.imageData = image;\n\n      if (this.imageData && this.element) {\n        const viewport = cornerstone.getDefaultViewportForImage(this.element, this.imageData);\n        cornerstone.displayImage(this.element, this.imageData, viewport); // Fit the image to the viewport window\n\n        cornerstone.fitToWindow(this.element);\n        cornerstone.resize(this.element, true);\n      }\n    }\n\n  }\n\n  ThumbnailDirective.ɵfac = function ThumbnailDirective_Factory(t) {\n    return new (t || ThumbnailDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n  };\n\n  ThumbnailDirective.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: ThumbnailDirective,\n    selectors: [[\"\", \"thumbnail\", \"\"]],\n    inputs: {\n      imageData: \"imageData\"\n    }\n  });\n  return ThumbnailDirective;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet DICOMViewerComponent = /*#__PURE__*/(() => {\n  class DICOMViewerComponent {\n    constructor() {\n      this.enableViewerTools = false; // enable viewer tools\n\n      this.enablePlayTools = false; // enable Play Clip tools\n\n      this.downloadImagesURL = ''; // download images URL\n\n      this.maxImagesToLoad = 20; // limit for the automatic loading of study images\n\n      this.seriesList = []; // list of series on the images being displayed\n\n      this.currentSeriesIndex = 0;\n      this.currentSeries = {};\n      this.imageCount = 0; // total image count being viewed\n      // control exhibition of a loading images progress indicator\n\n      this.loadingImages = false;\n      this.loadedImages = [];\n      this.imageIdList = [];\n      this.targetImageCount = 0;\n    } // control enable/disable image scroll buttons\n\n\n    get hidePreviousImage() {\n      return {\n        color: this.viewPort.currentIndex < 1 ? 'black' : 'white'\n      };\n    }\n\n    get hideNextImage() {\n      return {\n        color: this.viewPort.currentIndex >= this.imageCount - 1 ? 'black' : 'white'\n      };\n    } // control message for more images to load\n\n\n    get moreImagestoLoad() {\n      if (this.loadedImages.length < this.imageIdList.length && !this.loadingImages) {\n        // are there any more images to load?\n        const imagesToLoad = this.maxImagesToLoad <= 0 ? this.imageIdList.length - this.loadedImages.length : Math.min(this.maxImagesToLoad, this.imageIdList.length - this.loadedImages.length);\n        return imagesToLoad.toString();\n      } else return '';\n    }\n\n    get showProgress() {\n      return {\n        display: this.loadingImages ? 'inline-block' : 'none'\n      };\n    }\n\n    ngOnInit() {\n      this.element = this.viewPort.element;\n    }\n    /**\n     * Load dicom images for display\n     *\n     * @param imageIdList list of imageIds to load and display\n     */\n\n\n    loadStudyImages(imageIdList) {\n      this.element = this.viewPort.element;\n      this.imageIdList = imageIdList;\n      this.viewPort.resetViewer();\n      this.viewPort.resetImageCache(); // clean up image cache\n\n      this.seriesList = []; // start a new series list\n\n      this.currentSeriesIndex = 0; // always display first series\n\n      this.loadedImages = []; // reset list of images already loaded\n      //\n      // loop thru all imageIds, load and cache them for exhibition (up the the maximum limit defined)\n      //\n\n      const maxImages = this.maxImagesToLoad <= 0 ? imageIdList.length : Math.min(this.maxImagesToLoad, imageIdList.length);\n      this.loadingImages = true; // activate progress indicator\n\n      this.targetImageCount = maxImages;\n\n      for (let index = 0; index < maxImages; index++) {\n        const imageId = imageIdList[index];\n        cornerstone.loadAndCacheImage(imageId).then(imageData => {\n          this.imageLoaded(imageData);\n        });\n      }\n    }\n    /**\n     * Load the next batch of images\n     */\n\n\n    loadMoreImages() {\n      this.element = this.viewPort.element; //\n      // loop thru all imageIds, load and cache them for exhibition (up the the maximum limit defined)\n      //\n\n      const maxImages = this.maxImagesToLoad <= 0 ? this.imageIdList.length - this.loadedImages.length : Math.min(this.maxImagesToLoad, this.imageIdList.length - this.loadedImages.length);\n      this.loadingImages = true; // activate progress indicator\n\n      this.targetImageCount += maxImages;\n      let nextImageIndex = this.loadedImages.length;\n\n      for (let index = 0; index < maxImages; index++) {\n        const imageId = this.imageIdList[nextImageIndex++];\n        cornerstone.loadAndCacheImage(imageId).then(imageData => {\n          this.imageLoaded(imageData);\n        }).catch(err => {\n          this.targetImageCount--;\n        });\n      }\n    }\n    /**\n     *\n     * @param imageData the dicom image data\n     */\n\n\n    imageLoaded(imageData) {\n      //console.log(imageData.imageId)\n      // build list of series in all loadded images\n      const series = {\n        studyID: imageData.data.string('x0020000d'),\n        seriesID: imageData.data.string('x0020000e'),\n        seriesNumber: imageData.data.intString('x00200011'),\n        studyDescription: imageData.data.string('x00081030'),\n        seriesDescription: imageData.data.string('x0008103e'),\n        imageCount: 1,\n        imageList: [imageData]\n      }; // if this is a new series, add it to the list\n\n      let seriesIndex = this.seriesList.findIndex(item => item.seriesID === series.seriesID);\n\n      if (seriesIndex < 0) {\n        seriesIndex = this.seriesList.length;\n        this.seriesList.push(series);\n        this.seriesList.sort((a, b) => {\n          if (a.seriesNumber > b.seriesNumber) return 1;\n          if (a.seriesNumber < b.seriesNumber) return -1;\n          return 0;\n        });\n      } else {\n        let seriesItem = this.seriesList[seriesIndex];\n        seriesItem.imageCount++;\n        seriesItem.imageList.push(imageData);\n        seriesItem.imageList.sort((a, b) => {\n          if (a.data.intString('x00200013') > b.data.intString('x00200013')) return 1;\n          if (a.data.intString('x00200013') < b.data.intString('x00200013')) return -1;\n          return 0;\n        });\n      }\n\n      this.loadedImages.push(imageData); // save to images loaded\n\n      if (seriesIndex === this.currentSeriesIndex) {\n        //this.currentSeries = this.seriesList[seriesIndex];\n        //this.imageCount = this.currentSeries.imageCount; // get total image count\n        //this.viewPort.addImageData(imageData);\n        this.showSeries(this.currentSeriesIndex);\n      }\n\n      if (this.loadedImages.length >= this.targetImageCount) {\n        // did we finish loading images?\n        this.loadingImages = false; // deactivate progress indicator\n      }\n    }\n\n    showSeries(index) {\n      //        this.resetAllTools();\n      this.currentSeriesIndex = index;\n      this.currentSeries = this.seriesList[index];\n      this.imageCount = this.currentSeries.imageCount; // get total image count\n\n      this.viewPort.resetImageCache(); // clean up image cache\n      //        this.loadingImages = true; // activate progress indicator\n\n      for (let i = 0; i < this.currentSeries.imageList.length; i++) {\n        const imageData = this.currentSeries.imageList[i];\n        this.viewPort.addImageData(imageData);\n      } //        this.loadingImages = false; // de-activate progress indicator\n\n    }\n\n    saveAs() {\n      cornerstoneTools.saveAs(this.element, \"teste.jpg\");\n    }\n    /**\n     * Image scroll methods\n     */\n\n\n    nextImage() {\n      if (this.viewPort.currentIndex < this.imageCount) {\n        this.viewPort.nextImage();\n      }\n    }\n\n    previousImage() {\n      if (this.viewPort.currentIndex > 0) {\n        this.viewPort.previousImage();\n      }\n    }\n    /**\n     * Methods to activate/deactivate viewer tools\n     */\n    // deactivate all tools\n\n\n    resetAllTools() {\n      if (this.imageCount > 0) {\n        this.viewPort.resetAllTools();\n        this.stopClip();\n      }\n    } // activate windowing\n\n\n    enableWindowing() {\n      if (this.imageCount > 0) {\n        this.resetAllTools(); // cornerstoneTools.wwwc.activate(this.element, 1);\n        // cornerstoneTools.wwwcTouchDrag.activate(this.element);\n\n        cornerstoneTools.setToolActiveForElement(this.element, 'Wwwc', {\n          mouseButtonMask: 1\n        }, ['Mouse']);\n      }\n    } // activate zoom\n\n\n    enableZoom() {\n      if (this.imageCount > 0) {\n        this.resetAllTools(); // cornerstoneTools.zoom.activate(this.element, 5); // 5 is right mouse button and left mouse button\n        // cornerstoneTools.zoomTouchDrag.activate(this.element);\n\n        cornerstoneTools.setToolActiveForElement(this.element, 'Zoom', {\n          mouseButtonMask: 1\n        }, ['Mouse']); // zoom left mouse\n        // cornerstoneTools.setToolActiveForElement(this.element, 'ZoomTouchPinch', { }, ['Mouse']);\n\n        cornerstoneTools.setToolActiveForElement(this.element, 'Pan', {\n          mouseButtonMask: 2\n        }, ['Mouse']); // pan right mouse\n      }\n    } // activate pan\n\n\n    enablePan() {\n      if (this.imageCount > 0) {\n        this.resetAllTools(); // cornerstoneTools.pan.activate(this.element, 3); // 3 is middle mouse button and left mouse button\n        // cornerstoneTools.panTouchDrag.activate(this.element);\n\n        cornerstoneTools.setToolActiveForElement(this.element, 'Pan', {\n          mouseButtonMask: 1\n        }, ['Mouse']);\n      }\n    } // activate image scroll\n\n\n    enableScroll() {\n      if (this.imageCount > 0) {\n        this.resetAllTools(); // cornerstoneTools.stackScroll.activate(this.element, 1);\n        // cornerstoneTools.stackScrollTouchDrag.activate(this.element);\n        // cornerstoneTools.stackScrollKeyboard.activate(this.element);\n\n        cornerstoneTools.setToolActiveForElement(this.element, 'StackScroll', {\n          mouseButtonMask: 1\n        }, ['Mouse']);\n      }\n    } // activate length measurement\n\n\n    enableLength() {\n      if (this.imageCount > 0) {\n        this.resetAllTools(); // cornerstoneTools.length.activate(this.element, 1);\n\n        cornerstoneTools.setToolActiveForElement(this.element, 'Length', {\n          mouseButtonMask: 1\n        }, ['Mouse']);\n      }\n    } // activate angle measurement\n\n\n    enableAngle() {\n      if (this.imageCount > 0) {\n        this.resetAllTools(); // cornerstoneTools.simpleAngle.activate(this.element, 1);\n\n        cornerstoneTools.setToolActiveForElement(this.element, 'Angle', {\n          mouseButtonMask: 1\n        }, ['Mouse']);\n      }\n    } // activate pixel probe\n\n\n    enableProbe() {\n      if (this.imageCount > 0) {\n        this.resetAllTools(); // cornerstoneTools.probe.activate(this.element, 1);\n\n        cornerstoneTools.setToolActiveForElement(this.element, 'Probe', {\n          mouseButtonMask: 1\n        }, ['Mouse']);\n      }\n    } // activate Elliptical ROI\n\n\n    enableElliptical() {\n      if (this.imageCount > 0) {\n        this.resetAllTools(); // cornerstoneTools.ellipticalRoi.activate(this.element, 1);\n\n        cornerstoneTools.setToolActiveForElement(this.element, 'EllipticalRoi', {\n          mouseButtonMask: 1\n        }, ['Mouse']);\n      }\n    } // activate Rectangle ROI\n\n\n    enableRectangle() {\n      if (this.imageCount > 0) {\n        this.resetAllTools(); // cornerstoneTools.rectangleRoi.activate(this.element, 1);\n\n        cornerstoneTools.setToolActiveForElement(this.element, 'RectangleRoi', {\n          mouseButtonMask: 1\n        }, ['Mouse']);\n      }\n    } // Play Clip\n\n\n    playClip() {\n      if (this.imageCount > 0) {\n        let frameRate = 10;\n        let stackState = cornerstoneTools.getToolState(this.element, 'stack');\n\n        if (stackState) {\n          frameRate = stackState.data[0].frameRate; // Play at a default 10 FPS if the framerate is not specified\n\n          if (frameRate === undefined || frameRate === null || frameRate === 0) {\n            frameRate = 10;\n          }\n        }\n\n        cornerstoneTools.playClip(this.element, frameRate);\n      }\n    } // Stop Clip\n\n\n    stopClip() {\n      cornerstoneTools.stopClip(this.element);\n    } // invert image\n\n\n    invertImage() {\n      if (this.imageCount > 0) {\n        let viewport = cornerstone.getViewport(this.element); // Toggle invert\n\n        if (viewport.invert === true) {\n          viewport.invert = false;\n        } else {\n          viewport.invert = true;\n        }\n\n        cornerstone.setViewport(this.element, viewport);\n      }\n    } // reset image\n\n\n    resetImage() {\n      if (this.imageCount > 0) {\n        let toolStateManager = cornerstoneTools.getElementToolStateManager(this.element); // Note that this only works on ImageId-specific tool state managers (for now)\n        //toolStateManager.clear(this.element);\n\n        cornerstoneTools.clearToolState(this.element, \"Length\");\n        cornerstoneTools.clearToolState(this.element, \"Angle\"); // cornerstoneTools.clearToolState(this.element, \"simpleAngle\");\n\n        cornerstoneTools.clearToolState(this.element, \"Probe\");\n        cornerstoneTools.clearToolState(this.element, \"EllipticalRoi\");\n        cornerstoneTools.clearToolState(this.element, \"RectangleRoi\");\n        cornerstone.updateImage(this.element);\n        this.resetAllTools();\n      }\n    }\n\n    clearImage() {\n      this.viewPort.resetViewer();\n      this.viewPort.resetImageCache();\n      this.seriesList = []; // list of series on the images being displayed\n\n      this.currentSeriesIndex = 0;\n      this.currentSeries = {};\n      this.imageCount = 0; // total image count being viewed\n    }\n\n  }\n\n  DICOMViewerComponent.ɵfac = function DICOMViewerComponent_Factory(t) {\n    return new (t || DICOMViewerComponent)();\n  };\n\n  DICOMViewerComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: DICOMViewerComponent,\n    selectors: [[\"dicom-viewer\"]],\n    viewQuery: function DICOMViewerComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(CornerstoneDirective, 7);\n        ɵngcc0.ɵɵviewQuery(ThumbnailDirective, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.viewPort = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.thumbnails = _t);\n      }\n    },\n    inputs: {\n      enableViewerTools: \"enableViewerTools\",\n      enablePlayTools: \"enablePlayTools\",\n      downloadImagesURL: \"downloadImagesURL\",\n      maxImagesToLoad: \"maxImagesToLoad\"\n    },\n    decls: 37,\n    vars: 15,\n    consts: [[2, \"display\", \"flex\", \"width\", \"100%\", \"height\", \"100%\"], [\"class\", \"thumbnailSelector\", \"style\", \"margin-right: 5px;\", 4, \"ngIf\"], [2, \"overflow\", \"hidden\", \"width\", \"100%\", \"height\", \"100%\", \"background-color\", \"#424242\"], [1, \"btn-group\"], [\"class\", \"btn-group\", 4, \"ngIf\"], [\"type\", \"  button\", \"data-container\", \"body\", \"data-toggle\", \"tooltip\", \"data-placement\", \"bottom\", \"title\", \"Zoom\", 1, \"btn\", \"btn-sm\", \"btn-default\", 3, \"click\"], [1, \"fa\", \"fa-search\"], [\"type\", \"button\", \"data-container\", \"body\", \"data-toggle\", \"tooltip\", \"data-placement\", \"bottom\", \"title\", \"Pan\", 1, \"btn\", \"btn-sm\", \"btn-default\", 3, \"click\"], [1, \"fa\", \"fa-arrows-alt\"], [\"type\", \"button\", \"style\", \"border-left: 1px dotted white;\", \"class\", \"btn btn-sm btn-default\", \"data-container\", \"body\", \"data-toggle\", \"tooltip\", \"data-placement\", \"bottom\", \"title\", \"Play Clip\", 3, \"click\", 4, \"ngIf\"], [\"type\", \"button\", \"class\", \"btn btn-sm btn-default\", \"data-container\", \"body\", \"data-toggle\", \"tooltip\", \"data-placement\", \"bottom\", \"title\", \"Stop Clip\", 3, \"click\", 4, \"ngIf\"], [\"download\", \"\", \"style\", \"border-left: 1px dotted white;\", \"class\", \"btn btn-sm btn-default\", \"data-container\", \"body\", \"data-toggle\", \"tooltip\", \"data-placement\", \"bottom\", \"title\", \"Download Imagens\", 3, \"href\", 4, \"ngIf\"], [\"type\", \"button\", \"data-container\", \"body\", \"data-toggle\", \"tooltip\", \"data-placement\", \"bottom\", \"title\", \"Imagem Anterior\", 1, \"btn\", \"btn-sm\", \"btn-default\", 2, \"border-left\", \"1px dotted white\", 3, \"ngStyle\", \"click\"], [1, \"fa\", \"fa-backward\"], [\"type\", \"button\", \"data-container\", \"body\", \"data-toggle\", \"tooltip\", \"data-placement\", \"bottom\", \"title\", \"Pr\\u00F3xima Imagem\", 1, \"btn\", \"btn-sm\", \"btn-default\", 3, \"ngStyle\", \"click\"], [1, \"fa\", \"fa-forward\"], [\"type\", \"button\", \"style\", \"border-left: 1px dotted white;color: white;white-space: nowrap;\", \"class\", \"btn btn-sm btn-default\", \"data-container\", \"body\", \"data-toggle\", \"tooltip\", \"data-placement\", \"bottom\", \"title\", \"Carrega mais imagens...\", 3, \"click\", 4, \"ngIf\"], [2, \"padding-left\", \"15px\", \"padding-top\", \"15px\", 3, \"ngStyle\"], [\"diameter\", \"30\", \"strokeWidth\", \"5\", \"color\", \"warn\", 2, \"display\", \"inline-block\"], [\"oncontextmenu\", \"return false\", \"unselectable\", \"on\", \"onselectstart\", \"return false;\", \"onmousedown\", \"return false;\", 1, \"cornerstone-enabled-image\", 2, \"width\", \"100%\", \"height\", \"calc(100% - 60px)\", \"position\", \"relative\", \"display\", \"inline-block\", \"color\", \"white\"], [\"cornerstone\", \"\", \"id\", \"dicomImage\", 2, \"width\", \"100%\", \"height\", \"100%\", \"top\", \"0px\", \"left\", \"0px\", \"position\", \"absolute\", \"outline\", \"none\", \"margin\", \"0 auto\"], [\"id\", \"mrtopleft\", 2, \"position\", \"absolute\", \"top\", \"3px\", \"left\", \"3px\"], [\"id\", \"mrtopright\", 2, \"position\", \"absolute\", \"top\", \"3px\", \"right\", \"3px\"], [\"id\", \"mrbottomleft\", 2, \"position\", \"absolute\", \"bottom\", \"3px\", \"left\", \"3px\"], [\"id\", \"mrbottomcenter\", 2, \"position\", \"absolute\", \"bottom\", \"3px\", \"width\", \"100%\", \"text-align\", \"center\", \"color\", \"red\"], [\"id\", \"mrbottomright\", 2, \"position\", \"absolute\", \"bottom\", \"6px\", \"right\", \"3px\"], [\"id\", \"sliceText\"], [1, \"thumbnailSelector\", 2, \"margin-right\", \"5px\"], [1, \"thumbnails\", \"list-group\", 2, \"height\", \"100%\"], [\"class\", \"list-group-item\", \"oncontextmenu\", \"return false\", \"unselectable\", \"on\", \"onselectstart\", \"return false;\", \"onmousedown\", \"return false;\", 3, \"ngClass\", \"click\", 4, \"ngFor\", \"ngForOf\"], [1, \"version\"], [2, \"color\", \"white\"], [\"oncontextmenu\", \"return false\", \"unselectable\", \"on\", \"onselectstart\", \"return false;\", \"onmousedown\", \"return false;\", 1, \"list-group-item\", 3, \"ngClass\", \"click\"], [\"thumbnail\", \"\", \"oncontextmenu\", \"return false\", \"unselectable\", \"on\", \"onselectstart\", \"return false;\", \"onmousedown\", \"return false;\", 1, \"csthumbnail\", 3, \"imageData\"], [1, \"text-center\", \"small\", 2, \"color\", \"white\"], [\"id\", \"imageCount\", 2, \"color\", \"red\", \"font-size\", \"10pt\"], [\"type\", \"button\", \"data-container\", \"body\", \"data-toggle\", \"tooltip\", \"data-placement\", \"bottom\", \"title\", \"Windowing\", 1, \"btn\", \"btn-sm\", \"btn-default\", 3, \"click\"], [1, \"fa\", \"fa-sun\"], [\"type\", \"button\", \"data-container\", \"body\", \"data-toggle\", \"tooltip\", \"data-placement\", \"bottom\", \"title\", \"Invert\", 1, \"btn\", \"btn-sm\", \"btn-default\", 3, \"click\"], [1, \"fa\", \"fa-adjust\"], [\"type\", \"button\", \"data-container\", \"body\", \"data-toggle\", \"tooltip\", \"data-placement\", \"bottom\", \"title\", \"Scroll\", 1, \"btn\", \"btn-sm\", \"btn-default\", 3, \"click\"], [1, \"fa\", \"fa-bars\"], [\"type\", \"button\", \"data-container\", \"body\", \"data-toggle\", \"tooltip\", \"data-placement\", \"bottom\", \"title\", \"Length\", 1, \"btn\", \"btn-sm\", \"btn-default\", 3, \"click\"], [1, \"fa\", \"fa-arrows-alt-v\"], [\"type\", \"button\", \"data-container\", \"body\", \"data-toggle\", \"tooltip\", \"data-placement\", \"bottom\", \"title\", \"Angle\", 1, \"btn\", \"btn-sm\", \"btn-default\", 3, \"click\"], [1, \"fa\", \"fa-angle-left\"], [\"type\", \"button\", \"data-container\", \"body\", \"data-toggle\", \"tooltip\", \"data-placement\", \"bottom\", \"title\", \"Pixel Probe\", 1, \"btn\", \"btn-sm\", \"btn-default\", 3, \"click\"], [1, \"fa\", \"fa-dot-circle\"], [\"type\", \"button\", \"data-container\", \"body\", \"data-toggle\", \"tooltip\", \"data-placement\", \"bottom\", \"title\", \"Elliptical ROI\", 1, \"btn\", \"btn-sm\", \"btn-default\", 3, \"click\"], [1, \"fa\", \"fa-circle\"], [\"type\", \"button\", \"data-container\", \"body\", \"data-toggle\", \"tooltip\", \"data-placement\", \"bottom\", \"title\", \"Rectangle ROI\", 1, \"btn\", \"btn-sm\", \"btn-default\", 3, \"click\"], [1, \"fa\", \"fa-square\"], [\"type\", \"button\", \"data-container\", \"body\", \"data-toggle\", \"tooltip\", \"data-placement\", \"bottom\", \"title\", \"Reset Image\", 1, \"btn\", \"btn-sm\", \"btn-default\", 3, \"click\"], [1, \"fa\", \"fa-window-restore\"], [\"type\", \"button\", \"data-container\", \"body\", \"data-toggle\", \"tooltip\", \"data-placement\", \"bottom\", \"title\", \"Play Clip\", 1, \"btn\", \"btn-sm\", \"btn-default\", 2, \"border-left\", \"1px dotted white\", 3, \"click\"], [1, \"fa\", \"fa-play\"], [\"type\", \"button\", \"data-container\", \"body\", \"data-toggle\", \"tooltip\", \"data-placement\", \"bottom\", \"title\", \"Stop Clip\", 1, \"btn\", \"btn-sm\", \"btn-default\", 3, \"click\"], [1, \"fa\", \"fa-stop\"], [\"download\", \"\", \"data-container\", \"body\", \"data-toggle\", \"tooltip\", \"data-placement\", \"bottom\", \"title\", \"Download Imagens\", 1, \"btn\", \"btn-sm\", \"btn-default\", 2, \"border-left\", \"1px dotted white\", 3, \"href\"], [1, \"fa\", \"fa-download\"], [\"type\", \"button\", \"data-container\", \"body\", \"data-toggle\", \"tooltip\", \"data-placement\", \"bottom\", \"title\", \"Carrega mais imagens...\", 1, \"btn\", \"btn-sm\", \"btn-default\", 2, \"border-left\", \"1px dotted white\", \"color\", \"white\", \"white-space\", \"nowrap\", 3, \"click\"], [1, \"fas\", \"fa-cloud-download-alt\"]],\n    template: function DICOMViewerComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n        ɵngcc0.ɵɵtemplate(1, DICOMViewerComponent_div_1_Template, 7, 1, \"div\", 1);\n        ɵngcc0.ɵɵelementStart(2, \"div\", 2);\n        ɵngcc0.ɵɵelementStart(3, \"div\");\n        ɵngcc0.ɵɵelementStart(4, \"div\", 3);\n        ɵngcc0.ɵɵtemplate(5, DICOMViewerComponent_div_5_Template, 19, 0, \"div\", 4);\n        ɵngcc0.ɵɵelementStart(6, \"div\", 3);\n        ɵngcc0.ɵɵelementStart(7, \"button\", 5);\n        ɵngcc0.ɵɵlistener(\"click\", function DICOMViewerComponent_Template_button_click_7_listener() {\n          return ctx.enableZoom();\n        });\n        ɵngcc0.ɵɵelement(8, \"span\", 6);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(9, \"button\", 7);\n        ɵngcc0.ɵɵlistener(\"click\", function DICOMViewerComponent_Template_button_click_9_listener() {\n          return ctx.enablePan();\n        });\n        ɵngcc0.ɵɵelement(10, \"span\", 8);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵtemplate(11, DICOMViewerComponent_button_11_Template, 2, 0, \"button\", 9);\n        ɵngcc0.ɵɵtemplate(12, DICOMViewerComponent_button_12_Template, 2, 0, \"button\", 10);\n        ɵngcc0.ɵɵtemplate(13, DICOMViewerComponent_a_13_Template, 2, 1, \"a\", 11);\n        ɵngcc0.ɵɵelementStart(14, \"button\", 12);\n        ɵngcc0.ɵɵlistener(\"click\", function DICOMViewerComponent_Template_button_click_14_listener() {\n          return ctx.previousImage();\n        });\n        ɵngcc0.ɵɵelement(15, \"span\", 13);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(16, \"button\", 14);\n        ɵngcc0.ɵɵlistener(\"click\", function DICOMViewerComponent_Template_button_click_16_listener() {\n          return ctx.nextImage();\n        });\n        ɵngcc0.ɵɵelement(17, \"span\", 15);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵtemplate(18, DICOMViewerComponent_a_18_Template, 3, 1, \"a\", 16);\n        ɵngcc0.ɵɵelementStart(19, \"div\", 17);\n        ɵngcc0.ɵɵelement(20, \"mat-spinner\", 18);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(21, \"div\", 19);\n        ɵngcc0.ɵɵelement(22, \"div\", 20);\n        ɵngcc0.ɵɵelementStart(23, \"div\", 21);\n        ɵngcc0.ɵɵtext(24);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(25, \"div\", 22);\n        ɵngcc0.ɵɵtext(26);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(27, \"div\", 23);\n        ɵngcc0.ɵɵelementStart(28, \"div\");\n        ɵngcc0.ɵɵtext(29);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(30, \"div\");\n        ɵngcc0.ɵɵtext(31);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(32, \"div\", 24);\n        ɵngcc0.ɵɵtext(33, \" SOMENTE PARA VISUALIZA\\u00C7\\u00C3O, N\\u00C3O PODE SER USADO PARA DIAGN\\u00D3STICO. \");\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(34, \"div\", 25);\n        ɵngcc0.ɵɵelementStart(35, \"div\", 26);\n        ɵngcc0.ɵɵtext(36);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.seriesList.length > 1);\n        ɵngcc0.ɵɵadvance(4);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.enableViewerTools);\n        ɵngcc0.ɵɵadvance(6);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.enablePlayTools);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.enablePlayTools);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.downloadImagesURL != \"\");\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngStyle\", ctx.hidePreviousImage);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"ngStyle\", ctx.hideNextImage);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.moreImagestoLoad != \"\");\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngStyle\", ctx.showProgress);\n        ɵngcc0.ɵɵadvance(5);\n        ɵngcc0.ɵɵtextInterpolate1(\" \", ctx.viewPort.patientName, \" \");\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵtextInterpolate1(\" \", ctx.viewPort.hospital, \" \");\n        ɵngcc0.ɵɵadvance(3);\n        ɵngcc0.ɵɵtextInterpolate1(\" \", ctx.viewPort.instanceNumber, \" \");\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵtextInterpolate1(\" WW/WC: \", ctx.viewPort.windowingValue, \" \");\n        ɵngcc0.ɵɵadvance(5);\n        ɵngcc0.ɵɵtextInterpolate2(\"Image: \", ctx.imageCount > 0 ? ctx.viewPort.currentIndex + 1 : 0, \"/\", ctx.imageCount, \"\");\n      }\n    },\n    directives: [ɵngcc1.NgIf, ɵngcc1.NgStyle, ɵngcc2.MatSpinner, CornerstoneDirective, ɵngcc1.NgForOf, ɵngcc1.NgClass, ThumbnailDirective],\n    styles: [\".btn-default[_ngcontent-%COMP%]{background-color:#424242;background-image:none;border-color:#424242;color:#fff;font-size:24pt;text-shadow:none}.thumbnailSelector[_ngcontent-%COMP%]{background-color:#424242;float:left;height:100%;margin-left:5px;width:106px}.thumbnails[_ngcontent-%COMP%]{margin:0;overflow-x:hidden;overflow-y:scroll}.csthumbnail[_ngcontent-%COMP%]{background-color:#000;border:0;color:#fff;height:100px;padding:0;width:100px}.version[_ngcontent-%COMP%]{bottom:20px;position:absolute;text-align:center;width:106px}a.list-group-item[_ngcontent-%COMP%]{background-color:#000;border:1px solid #424242;margin-bottom:3px;padding:2px;z-index:5}a.list-group-item.active[_ngcontent-%COMP%], a.list-group-item.active[_ngcontent-%COMP%]:focus, a.list-group-item.active[_ngcontent-%COMP%]:hover{background-color:#424242;background-image:linear-gradient(red,red,red);border-color:#4e4e4e}\"]\n  });\n  return DICOMViewerComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet DicomViewerModule = /*#__PURE__*/(() => {\n  class DicomViewerModule {}\n\n  DicomViewerModule.ɵfac = function DicomViewerModule_Factory(t) {\n    return new (t || DicomViewerModule)();\n  };\n\n  DicomViewerModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: DicomViewerModule\n  });\n  DicomViewerModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[FormsModule, CommonModule, MatProgressSpinnerModule]]\n  });\n  return DicomViewerModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(DicomViewerModule, {\n    declarations: function () {\n      return [DICOMViewerComponent, CornerstoneDirective, ThumbnailDirective];\n    },\n    imports: function () {\n      return [FormsModule, CommonModule, MatProgressSpinnerModule];\n    },\n    exports: function () {\n      return [DICOMViewerComponent, CornerstoneDirective, ThumbnailDirective];\n    }\n  });\n})();\n/*\n * Public API Surface of dicom-viewer\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { CornerstoneDirective, DICOMViewerComponent, DicomViewerModule, ThumbnailDirective }; //# sourceMappingURL=ng-dicomviewer.js.map","map":null,"metadata":{},"sourceType":"module"}