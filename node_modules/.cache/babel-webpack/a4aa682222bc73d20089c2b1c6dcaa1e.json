{"ast":null,"code":"import { CornerstoneDirective } from './cornerstone.directive';\nimport { ThumbnailDirective } from './thumbnail.directive';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nimport * as i2 from \"@angular/material/progress-spinner\";\nimport * as i3 from \"./cornerstone.directive\";\nimport * as i4 from \"./thumbnail.directive\";\n\nconst _c0 = function (a0) {\n  return {\n    \"active\": a0\n  };\n};\n\nfunction DICOMViewerComponent_div_1_a_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r10 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"a\", 32);\n    i0.ɵɵlistener(\"click\", function DICOMViewerComponent_div_1_a_2_Template_a_click_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r10);\n      const i_r8 = restoredCtx.index;\n      const ctx_r9 = i0.ɵɵnextContext(2);\n      return ctx_r9.showSeries(i_r8);\n    });\n    i0.ɵɵelement(1, \"div\", 33);\n    i0.ɵɵelementStart(2, \"div\", 34);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"div\", 22);\n    i0.ɵɵelementStart(5, \"div\", 35);\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const series_r7 = ctx.$implicit;\n    const i_r8 = ctx.index;\n    const ctx_r6 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(4, _c0, ctx_r6.currentSeriesIndex === i_r8));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"imageData\", series_r7.imageList[0]);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(series_r7.seriesDescription);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(series_r7.imageCount);\n  }\n}\n\nfunction DICOMViewerComponent_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 27);\n    i0.ɵɵelementStart(1, \"div\", 28);\n    i0.ɵɵtemplate(2, DICOMViewerComponent_div_1_a_2_Template, 7, 6, \"a\", 29);\n    i0.ɵɵelementStart(3, \"div\", 30);\n    i0.ɵɵelementStart(4, \"h6\", 31);\n    i0.ɵɵelementStart(5, \"small\");\n    i0.ɵɵtext(6, \"1.20.12.17\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r0.seriesList);\n  }\n}\n\nfunction DICOMViewerComponent_div_5_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r12 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 3);\n    i0.ɵɵelementStart(1, \"button\", 36);\n    i0.ɵɵlistener(\"click\", function DICOMViewerComponent_div_5_Template_button_click_1_listener() {\n      i0.ɵɵrestoreView(_r12);\n      const ctx_r11 = i0.ɵɵnextContext();\n      return ctx_r11.enableWindowing();\n    });\n    i0.ɵɵtext(2, \"Window\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"button\", 37);\n    i0.ɵɵlistener(\"click\", function DICOMViewerComponent_div_5_Template_button_click_3_listener() {\n      i0.ɵɵrestoreView(_r12);\n      const ctx_r13 = i0.ɵɵnextContext();\n      return ctx_r13.invertImage();\n    });\n    i0.ɵɵtext(4, \"Invert\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"button\", 38);\n    i0.ɵɵlistener(\"click\", function DICOMViewerComponent_div_5_Template_button_click_5_listener() {\n      i0.ɵɵrestoreView(_r12);\n      const ctx_r14 = i0.ɵɵnextContext();\n      return ctx_r14.enableScroll();\n    });\n    i0.ɵɵtext(6, \"Scroll\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"button\", 39);\n    i0.ɵɵlistener(\"click\", function DICOMViewerComponent_div_5_Template_button_click_7_listener() {\n      i0.ɵɵrestoreView(_r12);\n      const ctx_r15 = i0.ɵɵnextContext();\n      return ctx_r15.enableLength();\n    });\n    i0.ɵɵtext(8, \"Length\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"button\", 40);\n    i0.ɵɵlistener(\"click\", function DICOMViewerComponent_div_5_Template_button_click_9_listener() {\n      i0.ɵɵrestoreView(_r12);\n      const ctx_r16 = i0.ɵɵnextContext();\n      return ctx_r16.enableAngle();\n    });\n    i0.ɵɵtext(10, \"Angle\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(11, \"button\", 41);\n    i0.ɵɵlistener(\"click\", function DICOMViewerComponent_div_5_Template_button_click_11_listener() {\n      i0.ɵɵrestoreView(_r12);\n      const ctx_r17 = i0.ɵɵnextContext();\n      return ctx_r17.enableProbe();\n    });\n    i0.ɵɵtext(12, \"Probe\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(13, \"button\", 42);\n    i0.ɵɵlistener(\"click\", function DICOMViewerComponent_div_5_Template_button_click_13_listener() {\n      i0.ɵɵrestoreView(_r12);\n      const ctx_r18 = i0.ɵɵnextContext();\n      return ctx_r18.enableElliptical();\n    });\n    i0.ɵɵtext(14, \"Elliptical\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(15, \"button\", 43);\n    i0.ɵɵlistener(\"click\", function DICOMViewerComponent_div_5_Template_button_click_15_listener() {\n      i0.ɵɵrestoreView(_r12);\n      const ctx_r19 = i0.ɵɵnextContext();\n      return ctx_r19.enableRectangle();\n    });\n    i0.ɵɵtext(16, \"Rectangle\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(17, \"button\", 44);\n    i0.ɵɵlistener(\"click\", function DICOMViewerComponent_div_5_Template_button_click_17_listener() {\n      i0.ɵɵrestoreView(_r12);\n      const ctx_r20 = i0.ɵɵnextContext();\n      return ctx_r20.resetImage();\n    });\n    i0.ɵɵelement(18, \"span\", 45);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction DICOMViewerComponent_button_11_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r22 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"button\", 46);\n    i0.ɵɵlistener(\"click\", function DICOMViewerComponent_button_11_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r22);\n      const ctx_r21 = i0.ɵɵnextContext();\n      return ctx_r21.playClip();\n    });\n    i0.ɵɵelement(1, \"span\", 47);\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction DICOMViewerComponent_button_12_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r24 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"button\", 48);\n    i0.ɵɵlistener(\"click\", function DICOMViewerComponent_button_12_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r24);\n      const ctx_r23 = i0.ɵɵnextContext();\n      return ctx_r23.stopClip();\n    });\n    i0.ɵɵelement(1, \"span\", 49);\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction DICOMViewerComponent_a_13_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"a\", 50);\n    i0.ɵɵelement(1, \"span\", 51);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"href\", ctx_r4.downloadImagesURL, i0.ɵɵsanitizeUrl);\n  }\n}\n\nfunction DICOMViewerComponent_a_18_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r26 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"a\", 52);\n    i0.ɵɵlistener(\"click\", function DICOMViewerComponent_a_18_Template_a_click_0_listener() {\n      i0.ɵɵrestoreView(_r26);\n      const ctx_r25 = i0.ɵɵnextContext();\n      return ctx_r25.loadMoreImages();\n    });\n    i0.ɵɵelement(1, \"i\", 53);\n    i0.ɵɵelementEnd();\n  }\n}\n\nexport let DICOMViewerComponent = /*#__PURE__*/(() => {\n  class DICOMViewerComponent {\n    constructor() {\n      this.enableViewerTools = false; // enable viewer tools\n\n      this.enablePlayTools = false; // enable Play Clip tools\n\n      this.downloadImagesURL = ''; // download images URL\n\n      this.maxImagesToLoad = 20; // limit for the automatic loading of study images\n\n      this.seriesList = []; // list of series on the images being displayed\n\n      this.currentSeriesIndex = 0;\n      this.currentSeries = {};\n      this.imageCount = 0; // total image count being viewed\n      // control exhibition of a loading images progress indicator\n\n      this.loadingImages = false;\n      this.loadedImages = [];\n      this.imageIdList = [];\n      this.targetImageCount = 0;\n    } // control enable/disable image scroll buttons\n\n\n    get hidePreviousImage() {\n      return {\n        color: this.viewPort.currentIndex < 1 ? 'black' : 'white'\n      };\n    }\n\n    get hideNextImage() {\n      return {\n        color: this.viewPort.currentIndex >= this.imageCount - 1 ? 'black' : 'white'\n      };\n    } // control message for more images to load\n\n\n    get moreImagestoLoad() {\n      if (this.loadedImages.length < this.imageIdList.length && !this.loadingImages) {\n        // are there any more images to load?\n        const imagesToLoad = this.maxImagesToLoad <= 0 ? this.imageIdList.length - this.loadedImages.length : Math.min(this.maxImagesToLoad, this.imageIdList.length - this.loadedImages.length);\n        return imagesToLoad.toString();\n      } else return '';\n    }\n\n    get showProgress() {\n      return {\n        display: this.loadingImages ? 'inline-block' : 'none'\n      };\n    }\n\n    ngOnInit() {\n      this.element = this.viewPort.element;\n    }\n    /**\r\n     * Load dicom images for display\r\n     *\r\n     * @param imageIdList list of imageIds to load and display\r\n     */\n\n\n    loadStudyImages(imageIdList) {\n      this.element = this.viewPort.element;\n      this.imageIdList = imageIdList;\n      this.viewPort.resetViewer();\n      this.viewPort.resetImageCache(); // clean up image cache\n\n      this.seriesList = []; // start a new series list\n\n      this.currentSeriesIndex = 0; // always display first series\n\n      this.loadedImages = []; // reset list of images already loaded\n      //\n      // loop thru all imageIds, load and cache them for exhibition (up the the maximum limit defined)\n      //\n\n      const maxImages = this.maxImagesToLoad <= 0 ? imageIdList.length : Math.min(this.maxImagesToLoad, imageIdList.length);\n      this.loadingImages = true; // activate progress indicator\n\n      this.targetImageCount = maxImages;\n\n      for (let index = 0; index < maxImages; index++) {\n        const imageId = imageIdList[index];\n        cornerstone.loadAndCacheImage(imageId).then(imageData => {\n          this.imageLoaded(imageData);\n        });\n      }\n    }\n    /**\r\n     * Load the next batch of images\r\n     */\n\n\n    loadMoreImages() {\n      this.element = this.viewPort.element; //\n      // loop thru all imageIds, load and cache them for exhibition (up the the maximum limit defined)\n      //\n\n      const maxImages = this.maxImagesToLoad <= 0 ? this.imageIdList.length - this.loadedImages.length : Math.min(this.maxImagesToLoad, this.imageIdList.length - this.loadedImages.length);\n      this.loadingImages = true; // activate progress indicator\n\n      this.targetImageCount += maxImages;\n      let nextImageIndex = this.loadedImages.length;\n\n      for (let index = 0; index < maxImages; index++) {\n        const imageId = this.imageIdList[nextImageIndex++];\n        cornerstone.loadAndCacheImage(imageId).then(imageData => {\n          this.imageLoaded(imageData);\n        }).catch(err => {\n          this.targetImageCount--;\n        });\n      }\n    }\n    /**\r\n     *\r\n     * @param imageData the dicom image data\r\n     */\n\n\n    imageLoaded(imageData) {\n      //console.log(imageData.imageId)\n      // build list of series in all loadded images\n      const series = {\n        studyID: imageData.data.string('x0020000d'),\n        seriesID: imageData.data.string('x0020000e'),\n        seriesNumber: imageData.data.intString('x00200011'),\n        studyDescription: imageData.data.string('x00081030'),\n        seriesDescription: imageData.data.string('x0008103e'),\n        imageCount: 1,\n        imageList: [imageData]\n      }; // if this is a new series, add it to the list\n\n      let seriesIndex = this.seriesList.findIndex(item => item.seriesID === series.seriesID);\n\n      if (seriesIndex < 0) {\n        seriesIndex = this.seriesList.length;\n        this.seriesList.push(series);\n        this.seriesList.sort((a, b) => {\n          if (a.seriesNumber > b.seriesNumber) return 1;\n          if (a.seriesNumber < b.seriesNumber) return -1;\n          return 0;\n        });\n      } else {\n        let seriesItem = this.seriesList[seriesIndex];\n        seriesItem.imageCount++;\n        seriesItem.imageList.push(imageData);\n        seriesItem.imageList.sort((a, b) => {\n          if (a.data.intString('x00200013') > b.data.intString('x00200013')) return 1;\n          if (a.data.intString('x00200013') < b.data.intString('x00200013')) return -1;\n          return 0;\n        });\n      }\n\n      this.loadedImages.push(imageData); // save to images loaded\n\n      if (seriesIndex === this.currentSeriesIndex) {\n        //this.currentSeries = this.seriesList[seriesIndex];\n        //this.imageCount = this.currentSeries.imageCount; // get total image count\n        //this.viewPort.addImageData(imageData);\n        this.showSeries(this.currentSeriesIndex);\n      }\n\n      if (this.loadedImages.length >= this.targetImageCount) {\n        // did we finish loading images?\n        this.loadingImages = false; // deactivate progress indicator\n      }\n    }\n\n    showSeries(index) {\n      //        this.resetAllTools();\n      this.currentSeriesIndex = index;\n      this.currentSeries = this.seriesList[index];\n      this.imageCount = this.currentSeries.imageCount; // get total image count\n\n      this.viewPort.resetImageCache(); // clean up image cache\n      //        this.loadingImages = true; // activate progress indicator\n\n      for (let i = 0; i < this.currentSeries.imageList.length; i++) {\n        const imageData = this.currentSeries.imageList[i];\n        this.viewPort.addImageData(imageData);\n      } //        this.loadingImages = false; // de-activate progress indicator\n\n    }\n\n    saveAs() {\n      cornerstoneTools.saveAs(this.element, \"teste.jpg\");\n    }\n    /**\r\n     * Image scroll methods\r\n     */\n\n\n    nextImage() {\n      if (this.viewPort.currentIndex < this.imageCount) {\n        this.viewPort.nextImage();\n      }\n    }\n\n    previousImage() {\n      if (this.viewPort.currentIndex > 0) {\n        this.viewPort.previousImage();\n      }\n    }\n    /**\r\n     * Methods to activate/deactivate viewer tools\r\n     */\n    // deactivate all tools\n\n\n    resetAllTools() {\n      if (this.imageCount > 0) {\n        this.viewPort.resetAllTools();\n        this.stopClip();\n      }\n    } // activate windowing\n\n\n    enableWindowing() {\n      if (this.imageCount > 0) {\n        this.resetAllTools(); // cornerstoneTools.wwwc.activate(this.element, 1);\n        // cornerstoneTools.wwwcTouchDrag.activate(this.element);\n\n        cornerstoneTools.setToolActiveForElement(this.element, 'Wwwc', {\n          mouseButtonMask: 1\n        }, ['Mouse']);\n      }\n    } // activate zoom\n\n\n    enableZoom() {\n      if (this.imageCount > 0) {\n        this.resetAllTools(); // cornerstoneTools.zoom.activate(this.element, 5); // 5 is right mouse button and left mouse button\n        // cornerstoneTools.zoomTouchDrag.activate(this.element);\n\n        cornerstoneTools.setToolActiveForElement(this.element, 'Zoom', {\n          mouseButtonMask: 1\n        }, ['Mouse']); // zoom left mouse\n        // cornerstoneTools.setToolActiveForElement(this.element, 'ZoomTouchPinch', { }, ['Mouse']);\n\n        cornerstoneTools.setToolActiveForElement(this.element, 'Pan', {\n          mouseButtonMask: 2\n        }, ['Mouse']); // pan right mouse\n      }\n    } // activate pan\n\n\n    enablePan() {\n      if (this.imageCount > 0) {\n        this.resetAllTools(); // cornerstoneTools.pan.activate(this.element, 3); // 3 is middle mouse button and left mouse button\n        // cornerstoneTools.panTouchDrag.activate(this.element);\n\n        cornerstoneTools.setToolActiveForElement(this.element, 'Pan', {\n          mouseButtonMask: 1\n        }, ['Mouse']);\n      }\n    } // activate image scroll\n\n\n    enableScroll() {\n      if (this.imageCount > 0) {\n        this.resetAllTools(); // cornerstoneTools.stackScroll.activate(this.element, 1);\n        // cornerstoneTools.stackScrollTouchDrag.activate(this.element);\n        // cornerstoneTools.stackScrollKeyboard.activate(this.element);\n\n        cornerstoneTools.setToolActiveForElement(this.element, 'StackScroll', {\n          mouseButtonMask: 1\n        }, ['Mouse']);\n      }\n    } // activate length measurement\n\n\n    enableLength() {\n      if (this.imageCount > 0) {\n        this.resetAllTools(); // cornerstoneTools.length.activate(this.element, 1);\n\n        cornerstoneTools.setToolActiveForElement(this.element, 'Length', {\n          mouseButtonMask: 1\n        }, ['Mouse']);\n      }\n    } // activate angle measurement\n\n\n    enableAngle() {\n      if (this.imageCount > 0) {\n        this.resetAllTools(); // cornerstoneTools.simpleAngle.activate(this.element, 1);\n\n        cornerstoneTools.setToolActiveForElement(this.element, 'Angle', {\n          mouseButtonMask: 1\n        }, ['Mouse']);\n      }\n    } // activate pixel probe\n\n\n    enableProbe() {\n      if (this.imageCount > 0) {\n        this.resetAllTools(); // cornerstoneTools.probe.activate(this.element, 1);\n\n        cornerstoneTools.setToolActiveForElement(this.element, 'Probe', {\n          mouseButtonMask: 1\n        }, ['Mouse']);\n      }\n    } // activate Elliptical ROI\n\n\n    enableElliptical() {\n      if (this.imageCount > 0) {\n        this.resetAllTools(); // cornerstoneTools.ellipticalRoi.activate(this.element, 1);\n\n        cornerstoneTools.setToolActiveForElement(this.element, 'EllipticalRoi', {\n          mouseButtonMask: 1\n        }, ['Mouse']);\n      }\n    } // activate Rectangle ROI\n\n\n    enableRectangle() {\n      if (this.imageCount > 0) {\n        this.resetAllTools(); // cornerstoneTools.rectangleRoi.activate(this.element, 1);\n\n        cornerstoneTools.setToolActiveForElement(this.element, 'RectangleRoi', {\n          mouseButtonMask: 1\n        }, ['Mouse']);\n      }\n    } // Play Clip\n\n\n    playClip() {\n      if (this.imageCount > 0) {\n        let frameRate = 10;\n        let stackState = cornerstoneTools.getToolState(this.element, 'stack');\n\n        if (stackState) {\n          frameRate = stackState.data[0].frameRate; // Play at a default 10 FPS if the framerate is not specified\n\n          if (frameRate === undefined || frameRate === null || frameRate === 0) {\n            frameRate = 10;\n          }\n        }\n\n        cornerstoneTools.playClip(this.element, frameRate);\n      }\n    } // Stop Clip\n\n\n    stopClip() {\n      cornerstoneTools.stopClip(this.element);\n    } // invert image\n\n\n    invertImage() {\n      if (this.imageCount > 0) {\n        let viewport = cornerstone.getViewport(this.element); // Toggle invert\n\n        if (viewport.invert === true) {\n          viewport.invert = false;\n        } else {\n          viewport.invert = true;\n        }\n\n        cornerstone.setViewport(this.element, viewport);\n      }\n    } // reset image\n\n\n    resetImage() {\n      if (this.imageCount > 0) {\n        let toolStateManager = cornerstoneTools.getElementToolStateManager(this.element); // Note that this only works on ImageId-specific tool state managers (for now)\n        //toolStateManager.clear(this.element);\n\n        cornerstoneTools.clearToolState(this.element, \"Length\");\n        cornerstoneTools.clearToolState(this.element, \"Angle\"); // cornerstoneTools.clearToolState(this.element, \"simpleAngle\");\n\n        cornerstoneTools.clearToolState(this.element, \"Probe\");\n        cornerstoneTools.clearToolState(this.element, \"EllipticalRoi\");\n        cornerstoneTools.clearToolState(this.element, \"RectangleRoi\");\n        cornerstone.updateImage(this.element);\n        this.resetAllTools();\n      }\n    }\n\n    clearImage() {\n      this.viewPort.resetViewer();\n      this.viewPort.resetImageCache();\n      this.seriesList = []; // list of series on the images being displayed\n\n      this.currentSeriesIndex = 0;\n      this.currentSeries = {};\n      this.imageCount = 0; // total image count being viewed\n    }\n\n  }\n\n  DICOMViewerComponent.ɵfac = function DICOMViewerComponent_Factory(t) {\n    return new (t || DICOMViewerComponent)();\n  };\n\n  DICOMViewerComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: DICOMViewerComponent,\n    selectors: [[\"dicom-viewer\"]],\n    viewQuery: function DICOMViewerComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(CornerstoneDirective, 7);\n        i0.ɵɵviewQuery(ThumbnailDirective, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.viewPort = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.thumbnails = _t);\n      }\n    },\n    inputs: {\n      enableViewerTools: \"enableViewerTools\",\n      enablePlayTools: \"enablePlayTools\",\n      downloadImagesURL: \"downloadImagesURL\",\n      maxImagesToLoad: \"maxImagesToLoad\"\n    },\n    decls: 36,\n    vars: 15,\n    consts: [[2, \"display\", \"flex\", \"width\", \"100%\", \"height\", \"100%\"], [\"class\", \"thumbnailSelector\", \"style\", \"margin-right: 5px;\", 4, \"ngIf\"], [2, \"overflow\", \"hidden\", \"width\", \"100%\", \"height\", \"100%\", \"background-color\", \"#424242\"], [1, \"btn-group\"], [\"class\", \"btn-group\", 4, \"ngIf\"], [\"type\", \"  button\", \"data-container\", \"body\", \"data-toggle\", \"tooltip\", \"data-placement\", \"bottom\", \"title\", \"Zoom\", 1, \"btn\", \"btn-sm\", \"btn-default\", 3, \"click\"], [1, \"fa\", \"fa-search\"], [\"type\", \"button\", \"data-container\", \"body\", \"data-toggle\", \"tooltip\", \"data-placement\", \"bottom\", \"title\", \"Pan\", 1, \"btn\", \"btn-sm\", \"btn-default\", 3, \"click\"], [1, \"fa\", \"fa-arrows-alt\"], [\"type\", \"button\", \"style\", \"border-left: 1px dotted white;\", \"class\", \"btn btn-sm btn-default\", \"data-container\", \"body\", \"data-toggle\", \"tooltip\", \"data-placement\", \"bottom\", \"title\", \"Play Clip\", 3, \"click\", 4, \"ngIf\"], [\"type\", \"button\", \"class\", \"btn btn-sm btn-default\", \"data-container\", \"body\", \"data-toggle\", \"tooltip\", \"data-placement\", \"bottom\", \"title\", \"Stop Clip\", 3, \"click\", 4, \"ngIf\"], [\"download\", \"\", \"style\", \"border-left: 1px dotted white;\", \"class\", \"btn btn-sm btn-default\", \"data-container\", \"body\", \"data-toggle\", \"tooltip\", \"data-placement\", \"bottom\", \"title\", \"Download Imagens\", 3, \"href\", 4, \"ngIf\"], [\"type\", \"button\", \"data-container\", \"body\", \"data-toggle\", \"tooltip\", \"data-placement\", \"bottom\", \"title\", \"Imagem Anterior\", 1, \"btn\", \"btn-sm\", \"btn-default\", 2, \"border-left\", \"1px dotted white\", 3, \"ngStyle\", \"click\"], [1, \"fa\", \"fa-backward\"], [\"type\", \"button\", \"data-container\", \"body\", \"data-toggle\", \"tooltip\", \"data-placement\", \"bottom\", \"title\", \"Pr\\u00F3xima Imagem\", 1, \"btn\", \"btn-sm\", \"btn-default\", 3, \"ngStyle\", \"click\"], [1, \"fa\", \"fa-forward\"], [\"type\", \"button\", \"style\", \"border-left: 1px dotted white;color: white;white-space: nowrap;\", \"class\", \"btn btn-sm btn-default\", \"data-container\", \"body\", \"data-toggle\", \"tooltip\", \"data-placement\", \"bottom\", \"title\", \"Carrega mais imagens...\", 3, \"click\", 4, \"ngIf\"], [2, \"padding-left\", \"15px\", \"padding-top\", \"15px\", 3, \"ngStyle\"], [\"diameter\", \"30\", \"strokeWidth\", \"5\", \"color\", \"warn\", 2, \"display\", \"inline-block\"], [\"oncontextmenu\", \"return false\", \"unselectable\", \"on\", \"onselectstart\", \"return false;\", \"onmousedown\", \"return false;\", 1, \"cornerstone-enabled-image\", 2, \"width\", \"100%\", \"height\", \"calc(100% - 60px)\", \"position\", \"relative\", \"display\", \"inline-block\", \"color\", \"white\"], [\"cornerstone\", \"\", \"id\", \"dicomImage\", 2, \"width\", \"100%\", \"height\", \"100%\", \"top\", \"0px\", \"left\", \"0px\", \"position\", \"absolute\", \"outline\", \"none\", \"margin\", \"0 auto\"], [\"id\", \"mrtopleft\", 2, \"position\", \"absolute\", \"top\", \"3px\", \"left\", \"3px\"], [\"id\", \"mrtopright\", 2, \"position\", \"absolute\", \"top\", \"3px\", \"right\", \"3px\"], [\"id\", \"mrbottomleft\", 2, \"position\", \"absolute\", \"bottom\", \"3px\", \"left\", \"3px\"], [\"id\", \"mrbottomcenter\", 2, \"position\", \"absolute\", \"bottom\", \"3px\", \"width\", \"100%\", \"text-align\", \"center\", \"color\", \"red\"], [\"id\", \"mrbottomright\", 2, \"position\", \"absolute\", \"bottom\", \"6px\", \"right\", \"3px\"], [\"id\", \"sliceText\"], [1, \"thumbnailSelector\", 2, \"margin-right\", \"5px\"], [1, \"thumbnails\", \"list-group\", 2, \"height\", \"100%\"], [\"class\", \"list-group-item\", \"oncontextmenu\", \"return false\", \"unselectable\", \"on\", \"onselectstart\", \"return false;\", \"onmousedown\", \"return false;\", 3, \"ngClass\", \"click\", 4, \"ngFor\", \"ngForOf\"], [1, \"version\"], [2, \"color\", \"white\"], [\"oncontextmenu\", \"return false\", \"unselectable\", \"on\", \"onselectstart\", \"return false;\", \"onmousedown\", \"return false;\", 1, \"list-group-item\", 3, \"ngClass\", \"click\"], [\"thumbnail\", \"\", \"oncontextmenu\", \"return false\", \"unselectable\", \"on\", \"onselectstart\", \"return false;\", \"onmousedown\", \"return false;\", 1, \"csthumbnail\", 3, \"imageData\"], [1, \"text-center\", \"small\", 2, \"color\", \"white\"], [\"id\", \"imageCount\", 2, \"color\", \"red\", \"font-size\", \"10pt\"], [\"type\", \"button\", \"data-container\", \"body\", \"data-toggle\", \"tooltip\", \"data-placement\", \"bottom\", \"title\", \"Windowing\", 1, \"btn\", \"btn-sm\", \"btn-custom\", 3, \"click\"], [\"type\", \"button\", \"data-container\", \"body\", \"data-toggle\", \"tooltip\", \"data-placement\", \"bottom\", \"title\", \"Invert\", 1, \"btn\", \"btn-sm\", \"btn-custom\", 3, \"click\"], [\"type\", \"button\", \"data-container\", \"body\", \"data-toggle\", \"tooltip\", \"data-placement\", \"bottom\", \"title\", \"Scroll\", 1, \"btn\", \"btn-sm\", \"btn-custom\", 3, \"click\"], [\"type\", \"button\", \"data-container\", \"body\", \"data-toggle\", \"tooltip\", \"data-placement\", \"bottom\", \"title\", \"Length\", 1, \"btn\", \"btn-sm\", \"btn-custom\", 3, \"click\"], [\"type\", \"button\", \"data-container\", \"body\", \"data-toggle\", \"tooltip\", \"data-placement\", \"bottom\", \"title\", \"Angle\", 1, \"btn\", \"btn-sm\", \"btn-custom\", 3, \"click\"], [\"type\", \"button\", \"data-container\", \"body\", \"data-toggle\", \"tooltip\", \"data-placement\", \"bottom\", \"title\", \"Pixel Probe\", 1, \"btn\", \"btn-sm\", \"btn-custom\", 3, \"click\"], [\"type\", \"button\", \"data-container\", \"body\", \"data-toggle\", \"tooltip\", \"data-placement\", \"bottom\", \"title\", \"Elliptical ROI\", 1, \"btn\", \"btn-sm\", \"btn-custom\", 3, \"click\"], [\"type\", \"button\", \"data-container\", \"body\", \"data-toggle\", \"tooltip\", \"data-placement\", \"bottom\", \"title\", \"Rectangle ROI\", 1, \"btn\", \"btn-sm\", \"btn-custom\", 3, \"click\"], [\"type\", \"button\", \"data-container\", \"body\", \"data-toggle\", \"tooltip\", \"data-placement\", \"bottom\", \"title\", \"Reset Image\", 1, \"btn\", \"btn-sm\", \"btn-custom\", 3, \"click\"], [1, \"fa\", \"fa-window-restore\"], [\"type\", \"button\", \"data-container\", \"body\", \"data-toggle\", \"tooltip\", \"data-placement\", \"bottom\", \"title\", \"Play Clip\", 1, \"btn\", \"btn-sm\", \"btn-default\", 2, \"border-left\", \"1px dotted white\", 3, \"click\"], [1, \"fa\", \"fa-play\"], [\"type\", \"button\", \"data-container\", \"body\", \"data-toggle\", \"tooltip\", \"data-placement\", \"bottom\", \"title\", \"Stop Clip\", 1, \"btn\", \"btn-sm\", \"btn-default\", 3, \"click\"], [1, \"fa\", \"fa-stop\"], [\"download\", \"\", \"data-container\", \"body\", \"data-toggle\", \"tooltip\", \"data-placement\", \"bottom\", \"title\", \"Download Imagens\", 1, \"btn\", \"btn-sm\", \"btn-default\", 2, \"border-left\", \"1px dotted white\", 3, \"href\"], [1, \"fa\", \"fa-download\"], [\"type\", \"button\", \"data-container\", \"body\", \"data-toggle\", \"tooltip\", \"data-placement\", \"bottom\", \"title\", \"Carrega mais imagens...\", 1, \"btn\", \"btn-sm\", \"btn-default\", 2, \"border-left\", \"1px dotted white\", \"color\", \"white\", \"white-space\", \"nowrap\", 3, \"click\"], [1, \"fas\", \"fa-cloud-download-alt\"]],\n    template: function DICOMViewerComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵtemplate(1, DICOMViewerComponent_div_1_Template, 7, 1, \"div\", 1);\n        i0.ɵɵelementStart(2, \"div\", 2);\n        i0.ɵɵelementStart(3, \"div\");\n        i0.ɵɵelementStart(4, \"div\", 3);\n        i0.ɵɵtemplate(5, DICOMViewerComponent_div_5_Template, 19, 0, \"div\", 4);\n        i0.ɵɵelementStart(6, \"div\", 3);\n        i0.ɵɵelementStart(7, \"button\", 5);\n        i0.ɵɵlistener(\"click\", function DICOMViewerComponent_Template_button_click_7_listener() {\n          return ctx.enableZoom();\n        });\n        i0.ɵɵelement(8, \"span\", 6);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(9, \"button\", 7);\n        i0.ɵɵlistener(\"click\", function DICOMViewerComponent_Template_button_click_9_listener() {\n          return ctx.enablePan();\n        });\n        i0.ɵɵelement(10, \"span\", 8);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(11, DICOMViewerComponent_button_11_Template, 2, 0, \"button\", 9);\n        i0.ɵɵtemplate(12, DICOMViewerComponent_button_12_Template, 2, 0, \"button\", 10);\n        i0.ɵɵtemplate(13, DICOMViewerComponent_a_13_Template, 2, 1, \"a\", 11);\n        i0.ɵɵelementStart(14, \"button\", 12);\n        i0.ɵɵlistener(\"click\", function DICOMViewerComponent_Template_button_click_14_listener() {\n          return ctx.previousImage();\n        });\n        i0.ɵɵelement(15, \"span\", 13);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(16, \"button\", 14);\n        i0.ɵɵlistener(\"click\", function DICOMViewerComponent_Template_button_click_16_listener() {\n          return ctx.nextImage();\n        });\n        i0.ɵɵelement(17, \"span\", 15);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(18, DICOMViewerComponent_a_18_Template, 2, 0, \"a\", 16);\n        i0.ɵɵelementStart(19, \"div\", 17);\n        i0.ɵɵelement(20, \"mat-spinner\", 18);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(21, \"div\", 19);\n        i0.ɵɵelement(22, \"div\", 20);\n        i0.ɵɵelementStart(23, \"div\", 21);\n        i0.ɵɵtext(24);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(25, \"div\", 22);\n        i0.ɵɵtext(26);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(27, \"div\", 23);\n        i0.ɵɵelementStart(28, \"div\");\n        i0.ɵɵtext(29);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(30, \"div\");\n        i0.ɵɵtext(31);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(32, \"div\", 24);\n        i0.ɵɵelementStart(33, \"div\", 25);\n        i0.ɵɵelementStart(34, \"div\", 26);\n        i0.ɵɵtext(35);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.seriesList.length > 1);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngIf\", ctx.enableViewerTools);\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"ngIf\", ctx.enablePlayTools);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.enablePlayTools);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.downloadImagesURL != \"\");\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngStyle\", ctx.hidePreviousImage);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngStyle\", ctx.hideNextImage);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", ctx.moreImagestoLoad != \"\");\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngStyle\", ctx.showProgress);\n        i0.ɵɵadvance(5);\n        i0.ɵɵtextInterpolate1(\" \", ctx.viewPort.patientName, \" \");\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate1(\" \", ctx.viewPort.hospital, \" \");\n        i0.ɵɵadvance(3);\n        i0.ɵɵtextInterpolate1(\" \", ctx.viewPort.instanceNumber, \" \");\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate1(\" WW/WC: \", ctx.viewPort.windowingValue, \" \");\n        i0.ɵɵadvance(4);\n        i0.ɵɵtextInterpolate2(\"Image: \", ctx.imageCount > 0 ? ctx.viewPort.currentIndex + 1 : 0, \"/\", ctx.imageCount, \"\");\n      }\n    },\n    directives: [i1.NgIf, i1.NgStyle, i2.MatSpinner, i3.CornerstoneDirective, i1.NgForOf, i1.NgClass, i4.ThumbnailDirective],\n    styles: [\".btn-default[_ngcontent-%COMP%]{color:#fff;background-color:#424242;border-color:#424242;font-size:24pt;background-image:none;text-shadow:none}.thumbnailSelector[_ngcontent-%COMP%]{width:106px;float:left;margin-left:5px;height:100%;background-color:#424242}.thumbnails[_ngcontent-%COMP%]{margin:0;overflow-y:scroll;overflow-x:hidden}.csthumbnail[_ngcontent-%COMP%]{color:#fff;background-color:#000;width:100px;height:100px;border:0px;padding:0}.version[_ngcontent-%COMP%]{position:absolute;bottom:20px;width:106px;text-align:center}a.list-group-item[_ngcontent-%COMP%]{background-color:#000;padding:2px;border:1px solid #424242;z-index:5;margin-bottom:3px}a.list-group-item.active[_ngcontent-%COMP%], a.list-group-item.active[_ngcontent-%COMP%]:hover, a.list-group-item.active[_ngcontent-%COMP%]:focus{background-color:#424242;border-color:#4e4e4e;background-image:linear-gradient(red,red,red)}.btn-custom[_ngcontent-%COMP%]{background:white;border-radius:15px}\"]\n  });\n  return DICOMViewerComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}