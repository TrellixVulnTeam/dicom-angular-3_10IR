{"ast":null,"code":"import { ElementRef } from '@angular/core';\nimport * as Hammer from 'hammerjs';\nimport * as i0 from \"@angular/core\";\nexport let CornerstoneDirective = /*#__PURE__*/(() => {\n  class CornerstoneDirective {\n    constructor(elementRef) {\n      this.elementRef = elementRef;\n      this.imageList = [];\n      this.imageIdList = [];\n      this.currentIndex = 0;\n      this.patientName = ''; // current image Patient name, do display on the overlay\n\n      this.hospital = ''; // current image Institution name, to display on the overlay\n\n      this.instanceNumber = ''; // current image Instance #, to display on the overlay\n      // cornersTone Tools we use\n\n      this.WwwcTool = cornerstoneTools.WwwcTool;\n      this.PanTool = cornerstoneTools.PanTool;\n      this.ZoomTool = cornerstoneTools.ZoomTool;\n      this.ProbeTool = cornerstoneTools.ProbeTool;\n      this.LengthTool = cornerstoneTools.LengthTool;\n      this.AngleTool = cornerstoneTools.AngleTool;\n      this.EllipticalRoiTool = cornerstoneTools.EllipticalRoiTool;\n      this.RectangleRoiTool = cornerstoneTools.RectangleRoiTool;\n      this.DragProbeTool = cornerstoneTools.DragProbeTool;\n      this.ZoomTouchPinchTool = cornerstoneTools.ZoomTouchPinchTool;\n      this.PanMultiTouchTool = cornerstoneTools.PanMultiTouchTool;\n      this.StackScrollTool = cornerstoneTools.StackScrollTool;\n      this.StackScrollMouseWheelTool = cornerstoneTools.StackScrollMouseWheelTool;\n      this.HighlightTool = cornerstoneTools.HighlightTool;\n      this.isCornerstoneEnabled = false;\n    }\n\n    get windowingValue() {\n      if (this.isCornerstoneEnabled) {\n        let viewport = cornerstone.getViewport(this.element);\n\n        if (this.currentImage && viewport) {\n          return Math.round(viewport.voi.windowWidth) + \"/\" + Math.round(viewport.voi.windowCenter);\n        }\n      }\n\n      return '';\n    }\n\n    get zoomValue() {\n      if (this.isCornerstoneEnabled) {\n        let viewport = cornerstone.getViewport(this.element);\n\n        if (this.currentImage && viewport) {\n          return viewport.scale.toFixed(2);\n        }\n      }\n\n      return '';\n    }\n\n    onResize(event) {\n      if (this.isCornerstoneEnabled) {\n        cornerstone.resize(this.element, true);\n      }\n    }\n\n    onMouseWheel(event) {\n      event.preventDefault();\n\n      if (this.imageList.length > 0) {\n        const delta = Math.max(-1, Math.min(1, event.wheelDelta || -event.detail)); // console.log(event);\n\n        if (delta > 0) {\n          this.currentIndex++;\n\n          if (this.currentIndex >= this.imageList.length) {\n            this.currentIndex = this.imageList.length - 1;\n          }\n        } else {\n          this.currentIndex--;\n\n          if (this.currentIndex < 0) {\n            this.currentIndex = 0;\n          }\n        }\n\n        this.displayImage(this.imageList[this.currentIndex]);\n      }\n    }\n\n    ngOnInit() {\n      console.log(cornerstoneTools); // Retrieve the DOM element itself\n\n      this.element = this.elementRef.nativeElement; // now add the Tools we use\n\n      cornerstoneTools.external.cornerstone = cornerstone;\n      cornerstoneTools.external.Hammer = Hammer;\n      cornerstoneTools.external.cornerstoneMath = cornerstoneMath;\n      cornerstoneTools.init({\n        globalToolSyncEnabled: true\n      });\n      cornerstoneTools.addTool(this.WwwcTool);\n      cornerstoneTools.addTool(this.PanTool);\n      cornerstoneTools.addTool(this.ZoomTool);\n      cornerstoneTools.addTool(this.ProbeTool);\n      cornerstoneTools.addTool(this.LengthTool);\n      cornerstoneTools.addTool(this.AngleTool);\n      cornerstoneTools.addTool(this.EllipticalRoiTool);\n      cornerstoneTools.addTool(this.RectangleRoiTool);\n      cornerstoneTools.addTool(this.DragProbeTool);\n      cornerstoneTools.addTool(this.ZoomTouchPinchTool);\n      cornerstoneTools.addTool(this.PanMultiTouchTool);\n      cornerstoneTools.addTool(this.StackScrollTool);\n      cornerstoneTools.addTool(this.StackScrollMouseWheelTool);\n      cornerstoneTools.addTool(this.HighlightTool); // Enable the element with Cornerstone\n\n      this.resetViewer();\n    }\n\n    ngAfterViewChecked() {//  if (this.currentImage) cornerstone.resize(this.element, true);\n    } //\n    // reset the viewer, so only this current element is enabled\n    //\n\n\n    resetViewer() {\n      this.disableViewer();\n      cornerstone.enable(this.element);\n      this.isCornerstoneEnabled = true;\n    }\n\n    disableViewer() {\n      this.element = this.elementRef.nativeElement;\n\n      try {\n        cornerstone.disable(this.element);\n      } finally {}\n\n      this.isCornerstoneEnabled = false;\n    }\n\n    resetImageCache() {\n      this.imageList = [];\n      this.imageIdList = [];\n      this.currentImage = null;\n      this.currentIndex = 0;\n      this.patientName = '';\n      this.hospital = '';\n      this.instanceNumber = '';\n    }\n\n    previousImage() {\n      if (this.imageList.length > 0) {\n        this.currentIndex--;\n\n        if (this.currentIndex < 0) {\n          this.currentIndex = 0;\n        }\n\n        this.displayImage(this.imageList[this.currentIndex]);\n      }\n    }\n\n    nextImage() {\n      if (this.imageList.length > 0) {\n        this.currentIndex++;\n\n        if (this.currentIndex >= this.imageList.length) {\n          this.currentIndex = this.imageList.length - 1;\n        }\n\n        this.displayImage(this.imageList[this.currentIndex]);\n      }\n    }\n\n    addImageData(imageData) {\n      this.element = this.elementRef.nativeElement; //if (!this.imageList.filter(img => img.imageId === imageData.imageId).length) {\n\n      this.imageList.push(imageData);\n      this.imageIdList.push(imageData.imageId);\n\n      if (this.imageList.length === 1) {\n        this.currentIndex = 0;\n        this.displayImage(imageData);\n      } //}\n\n\n      cornerstone.resize(this.element, true);\n    }\n\n    displayImage(image) {\n      this.element = this.elementRef.nativeElement;\n      const viewport = cornerstone.getDefaultViewportForImage(this.element, image);\n      cornerstone.displayImage(this.element, image, viewport);\n      this.currentImage = image; // Fit the image to the viewport window\n\n      cornerstone.fitToWindow(this.element);\n      cornerstone.resize(this.element, true); // get image info to display in overlays\n\n      if (image.data.string('x00100010')) this.patientName = image.data.string('x00100010').replace(/\\^/g, '');\n      this.hospital = image.data.string('x00080080');\n      this.instanceNumber = image.data.intString('x00200011') + '/' + image.data.intString('x00200013'); // Activate mouse clicks, mouse wheel and touch\n      // cornerstoneTools.mouseInput.enable(this.element);\n      // cornerstoneTools.mouseWheelInput.enable(this.element);\n      // //cornerstoneTools.touchInput.enable(this.element);\n      // cornerstoneTools.keyboardInput.enable(this.element);\n      // Enable all tools we want to use with this element\n\n      cornerstoneTools.setToolActiveForElement(this.element, 'Wwwc', {\n        mouseButtonMask: 1\n      }, ['Mouse']); // ww/wc is the default tool for left mouse button\n\n      cornerstoneTools.setToolActiveForElement(this.element, 'Pan', {\n        mouseButtonMask: 4\n      }, ['Mouse']); // pan is the default tool for middle mouse button\n\n      cornerstoneTools.setToolActiveForElement(this.element, 'Zoom', {\n        mouseButtonMask: 2\n      }, ['Mouse']); // zoom is the default tool for right mouse button\n\n      cornerstoneTools.highlight.enable(this.element);\n      /*     cornerstoneTools.wwwc.activate(this.element, 1); // ww/wc is the default tool for left mouse button\r\n          cornerstoneTools.pan.activate(this.element, 2); // pan is the default tool for middle mouse button\r\n          cornerstoneTools.zoom.activate(this.element, 4); // zoom is the default tool for right mouse button\r\n          cornerstoneTools.probe.enable(this.element);\r\n          cornerstoneTools.length.enable(this.element);\r\n          cornerstoneTools.angle.enable(this.element);\r\n          cornerstoneTools.simpleAngle.enable(this.element);\r\n          cornerstoneTools.ellipticalRoi.enable(this.element);\r\n          cornerstoneTools.rectangleRoi.enable(this.element);\r\n          cornerstoneTools.wwwcTouchDrag.activate(this.element) // - Drag\r\n          cornerstoneTools.zoomTouchPinch.activate(this.element) // - Pinch*/\n      // cornerstoneTools.highlight.activate(this.element, 'Highlight') // - Multi (x2) \n      // Stack tools\n      // Define the Stack object\n\n      const stack = {\n        currentImageIdIndex: this.currentIndex,\n        imageIds: this.imageIdList\n      };\n      cornerstoneTools.addStackStateManager(this.element, ['playClip']); // Add the stack tool state to the enabled element\n\n      cornerstoneTools.addStackStateManager(this.element, ['stack']);\n      cornerstoneTools.addToolState(this.element, 'stack', stack); // cornerstoneTools.stackScrollWheel.activate(this.element);\n      // Enable all tools we want to use with this element\n\n      cornerstoneTools.setToolActiveForElement(this.element, 'StackScroll', {}); //cornerstoneTools.stackPrefetch.enable(this.element);\n    } // cornerstone.displayImage(this.element, image);\n    // deactivate all tools\n\n\n    resetAllTools() {\n      cornerstoneTools.setToolDisabledForElement(this.element, 'Wwwc');\n      cornerstoneTools.setToolDisabledForElement(this.element, 'Pan');\n      cornerstoneTools.setToolDisabledForElement(this.element, 'Zoom');\n      cornerstoneTools.setToolDisabledForElement(this.element, 'Probe');\n      cornerstoneTools.setToolDisabledForElement(this.element, 'Length');\n      cornerstoneTools.setToolDisabledForElement(this.element, 'Angle');\n      cornerstoneTools.setToolDisabledForElement(this.element, 'EllipticalRoi');\n      cornerstoneTools.setToolDisabledForElement(this.element, 'RectangleRoi');\n      cornerstoneTools.setToolDisabledForElement(this.element, 'DragProbe');\n      cornerstoneTools.setToolDisabledForElement(this.element, 'ZoomTouchPinch');\n      cornerstoneTools.setToolDisabledForElement(this.element, 'PanMultiTouch');\n      cornerstoneTools.setToolDisabledForElement(this.element, 'StackScroll');\n      cornerstoneTools.setToolDisabledForElement(this.element, 'StackScrollMouseWheel');\n      cornerstoneTools.setToolDisabledForElement(this.element, 'HighlightTool');\n    }\n\n  }\n\n  CornerstoneDirective.ɵfac = function CornerstoneDirective_Factory(t) {\n    return new (t || CornerstoneDirective)(i0.ɵɵdirectiveInject(i0.ElementRef));\n  };\n\n  CornerstoneDirective.ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n    type: CornerstoneDirective,\n    selectors: [[\"\", \"cornerstone\", \"\"]],\n    hostBindings: function CornerstoneDirective_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"resize\", function CornerstoneDirective_resize_HostBindingHandler($event) {\n          return ctx.onResize($event);\n        }, false, i0.ɵɵresolveWindow)(\"wheel\", function CornerstoneDirective_wheel_HostBindingHandler($event) {\n          return ctx.onMouseWheel($event);\n        });\n      }\n    }\n  });\n  return CornerstoneDirective;\n})();","map":null,"metadata":{},"sourceType":"module"}